from typing import Optional

import tjax

import jax.numpy as jnp

from imprl.modules.base import Module
from imprl.modules.features import Encoder


@tjax.dataclass
class LinearModule(Module):
    """ A linear function whose weights are generated by some other module.
    """
    weight_module: Module = tjax.field(static=True)  # type: ignore
    encoder: Optional[Encoder] = tjax.field(static=True, default=None)  # type: ignore
    use_bias: bool = tjax.field(static=True, default=False)  # type: ignore

    def init(self, key, inputs):
        if self.encoder is not None:
            inputs = self.encoder.apply(inputs)

        if self.use_bias:
            inputs = jnp.concatenate((inputs, jnp.ones_like(inputs[..., :1])), axis=-1)

        params = self.weight_module.init(key, inputs)
        # if self.use_bias:
        #     params = (params, jnp.zeros((), dtype=inputs.dtype))

        return params

    def apply(self, params, inputs):
        if self.encoder is not None:
            inputs = self.encoder.apply(inputs)

        # bias = None
        # if self.use_bias:
        #     params, bias = params

        if self.use_bias:
            inputs = jnp.concatenate((inputs, jnp.ones_like(inputs[..., :1])), axis=-1)

        weights = self.weight_module.apply(params, inputs)
        output = inputs @ weights

        # if bias is not None:
        #     output = output + bias
        return output
